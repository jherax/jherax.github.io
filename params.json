{"name":"jherax.github.io","tagline":"This site shows examples for the plugins developed by jherax","body":"[js-utils][js-utils]\r\n========\r\n\r\nThese are a suite of utilities for javascript and jquery, including tools for validating, text formatting, and misc.\r\n\r\nGetting Started\r\n---------------\r\nThe tools has a dependency on [jQuery 1.9+][jQuery.js], which must be loaded before *[js-utils][jherax.js]*.<br>\r\nAlso require some [CSS][jherax.css] for tooltip elements and other stuff.<br>\r\nSome functions depend on [jQuery.UI][jQuery.ui]<br><br>\r\nThe namespace is `js.utils`, so we must use it to access the methods exposed.<br>\r\nA property called `wrapper` was exposed in `js` namespace to specify where the [tooltip](#fnshowtooltip-dom-message) and [loading](#fnloading-options) elements will be appended. By default `js.wrapper = \"body\"`<br>\r\n\r\nNamespacing\r\n-----------\r\nIn many programming languages, namespacing is a technique employed to avoid collisions with other objects or variables in the global namespace. They're also extremely useful for helping organize blocks of functionality in your application into easily manageable groups that can be uniquely identified.<br>\r\n\r\nIn JavaScript, namespacing at an enterprise level is critical as it's important to safeguard your code from breaking in the event of another script on the page using the same variable or method names as you are.\r\n\r\nList of methods\r\n---------------\r\n* [browser](#browser)\r\n* [isDOM](#isdom-object)\r\n* [isEvent](#isevent-object)\r\n* [isFunction](#isfunction-object)\r\n* [fnStringify](#fnstringify-json)\r\n* [fnGetDate](#fngetdate-)\r\n* [fnGetHtmlText](#fngethtmltext-index-value)\r\n* [fnGetSelectedText](#fngetselectedtext-)\r\n* [fnGetCaretPosition](#fngetcaretposition-dom)\r\n* [fnSetCaretPosition](#fnsetcaretposition-dom-position)\r\n* [fnEscapeRegExp](#fnescaperegexp-text)\r\n* [fnCapitalize](#fncapitalize-object-type)\r\n* [fnNumericFormat](#fnnumericformat-object)\r\n* [fnIsValidFormat](#fnisvalidformat-object-type)\r\n* [fnIsValidDate](#fnisvaliddate-dom-options)\r\n* [fnShowTooltip](#fnshowtooltip-dom-message)\r\n* [fnLoading](#fnloading-options)\r\n* [fnSetFocus](#fnsetfocus-)\r\n\r\njQuery extensions\r\n-----------------\r\n* [$.fnCenter](#jqueryfncenter-)\r\n* [$.fnMaxLength](#jqueryfnmaxlength-length)\r\n* [$.fnCapitalize](#jqueryfncapitalize-type)\r\n* [$.fnNumericFormat](#jqueryfnnumericformat-)\r\n* [$.fnNumericInput](#jqueryfnnumericinput-)\r\n* [$.fnCustomInput](#jqueryfncustominput-mask)\r\n* [$.fnDisableKey](#jqueryfndisablekey-keys)\r\n* [$.fnEasyValidate](#jqueryfneasyvalidate-fnvalidator)\r\n\r\nUsage\r\n-----\r\n\r\n### browser\r\nAdds support for browser detect, because jquery 1.9+ deprecates the *[browser]* property.<br>\r\nFor detecting capabilities, better to use [Modernizr](http://modernizr.com/docs/).<br>\r\n**Returns** `Object`\r\n```javascript\r\n  if (js.utils.browser.msie) { ... }\r\n  if (js.utils.browser.chrome) { ... }\r\n  if (js.utils.browser.mozilla) { ... }\r\n  if (js.utils.browser.opera) { ... }\r\n  // you can see what is your browser\r\n  console.log(js.utils.browser);\r\n  // you can also know the browser version\r\n  console.log(js.utils.browser.version);\r\n```\r\n\r\n### isDOM *(object)*\r\nDetermines if a object is DOM element.<br>\r\n**Returns** `Boolean`\r\n* **object:** `Object` to validate\r\n\r\n```javascript\r\n  var _dom = document.getElementById(\"txtName\");\r\n  console.log(js.utils.isDOM(_dom));\r\n  if(js.utils.isDOM(_dom)) { ... }\r\n```\r\n\r\n### isEvent *(object)*\r\nDetermines if the entry parameter is a normalized [Event Object](http://api.jquery.com/category/events/event-object/).<br>\r\n**Returns** `Boolean`\r\n* **object:** `Object` to validate\r\n\r\n```javascript\r\n  $(\"#txtName\").on(\"click\", function(e) {\r\n    console.log(js.utils.isEvent(e));\r\n  });\r\n```\r\n\r\n### isFunction *(object)*\r\nDetermines if the entry parameter is a function.<br>\r\n**Returns** `Boolean`\r\n* **object:** `Object` to validate\r\n\r\n```javascript\r\n  var myObj = function() {};\r\n  //myObj = \"function\";\r\n  //myObj = null;\r\n  //myObj = {};\r\n  console.log(js.utils.isFunction(myObj));\r\n  if (js.utils.isFunction(myObj)) {\r\n    //call the method\r\n    myObj();\r\n  }\r\n```\r\n\r\n### fnStringify *(json)*\r\nThis is a facade of `JSON.stringify` and provides support in old browsers.<br>\r\nfnStringify serializes a *JSON* object and returns its string representation.<br>\r\n**Returns** `String`\r\n* **json:** `JSON` object to be serialized\r\n\r\n```javascript\r\n  var jsonPerson = {\r\n      name: \"David\",\r\n      sex: \"male\",\r\n      age: 30\r\n  };\r\n  console.log(js.utils.fnStringify(jsonPerson));\r\n  // '{\"name\":\"David\",\"age\":30,\"sex\":\"male\"}'\r\n\r\n  // We use jQuery.extend to merge the contents of\r\n  // two or more objects together into the first object.\r\n  var jsonNew = $.extend({ alias: 'jherax' }, jsonPerson);\r\n  console.log(js.utils.fnStringify(jsonNew));\r\n```\r\n\r\n### fnGetDate ()\r\nGets the text of current date in **es-CO** culture.<br>\r\n**Returns** `Object` with the following properties:\r\n```javascript\r\n{\r\n  date: String //gets the date in dd/MM/yyyy format\r\n  time: String //gets the time in HH:mm:ss format\r\n  dateTime: String //gets the date in dd/MM/yyyy HH:mm:ss format\r\n}\r\n```\r\n```javascript\r\n  var d = js.utils.fnGetDate();\r\n  $(\"#span-time\").html(d.date +\" <b>\"+ d.time +\"</b>\");\r\n```\r\n\r\n### fnGetHtmlText *(index, value)*\r\nGets the text as html encoded.<br>\r\nThis is a delegate for [jQuery.val()](http://api.jquery.com/val/#val2) or [jQuery.text()](http://api.jquery.com/text/#text2)<br>\r\n**Returns** `String` with encoded html text\r\n```html\r\n  <textarea rows=\"4\"></textarea>\r\n  <textarea rows=\"6\" class=\"target\"></textarea>\r\n  <div id=\"demo-wrapper\">\r\n    <h3>fnGetHtmlText</h3>\r\n    <p><u>Demo for delegated function</u></p>\r\n  </div>\r\n```\r\n```javascript\r\n  var html = $(\"#demo-wrapper\").html();\r\n  console.log(html);\r\n  $(\"textarea\").val($.trim(html));\r\n  $(\".target\").val(js.utils.fnGetHtmlText);\r\n  //also can run it as invoked function\r\n  console.log(js.utils.fnGetHtmlText(0, html));\r\n```\r\n\r\n### fnGetSelectedText ()\r\nGets the selected text in the document.<br>\r\n**Returns** `Object` with the following properties:\r\n```javascript\r\n{\r\n  text: String //selected text (whitespace removed from the beginning and end of text)\r\n  slice: String //complement of selected text (if active element is category:text)\r\n  start: Number //initial cursor position (if active element is category:text)\r\n  end: Number //final cursor position (if active element is category:text)\r\n}\r\n```\r\n<div align=\"right\">Take a look at <a href=\"#categorytext\">category:text</a>&nbsp;</div>\r\n```javascript\r\n  var sel = js.utils.fnGetSelectedText();\r\n  if (sel.text !== \"\") alert(sel.text);\r\n  console.log(sel);\r\n```\r\n\r\n### fnGetCaretPosition *(dom)*\r\nGets the cursor position in the text.<br>\r\n**Returns** `Number`\r\n* **dom:** `DOM` active element [category:text][category.text]\r\n\r\n```javascript\r\n  var text = document.getElementById(\"txtName\");\r\n  //text = $(\"#txtName\").get(0);\r\n  text.value = \"Hello World!\";\r\n  var pos = js.utils.fnGetCaretPosition(text);\r\n  console.log(pos);\r\n```\r\n\r\n### fnSetCaretPosition *(dom, position)*\r\nSets the cursor position in the text.<br>\r\n* **dom:** `DOM` element [category:text][category.text]\r\n* **position** `Number` of the position where the cursor is set\r\n\r\n```javascript\r\n  var text = $(\"#txtName\").get(0);\r\n  text.value = \"Hello World!\";\r\n  text.focus();\r\n  js.utils.fnSetCaretPosition(text, 5);\r\n  //cursor must be positioned after \"Hello\"\r\n```\r\n\r\n### fnEscapeRegExp *(text)*\r\nEscaping user input to be treated as a literal string within a regular expression.<br>\r\n**Returns** `String` or `null` if *text* parameter is not a string\r\n```javascript\r\n  var re1 = new RegExp(\"[abc]+\\\\d\"); //treats the string as a regular expression pattern\r\n  var re2 = new RegExp(js.utils.fnEscapeRegExp(\"[abc]+\\\\d\")); //treats the string as a literal\r\n  console.log(re1.test(\"ac1\")); //RegExp is: /[abc]+\\d/\r\n  console.log(re2.test(\"ac1\")); //RegExp is: /\\[abc\\]\\+\\\\d/\r\n```\r\n\r\n### fnCapitalize *(object, type)*\r\nTransforms the text to capital letter. (Some articles are lowercased according to **es-CO** culture)<br>\r\nThis function also removes all newlines, spaces, and tabs from the beginning and end of the supplied string.<br>\r\nIf the whitespace characters occur in the middle of the string, also they are removed.<br>\r\n**Returns** `String`\r\n* **object:** `String` or `DOM` element [category:text][category.text]\r\n* **type:** `String` specifying the text transformation. Can be one of the following values:\r\n  * `word` transform to lowercase and then turns the first letter of each word into uppercase\r\n  * `title` turns the first letter of each word into uppercase\r\n  * `lower` transform to lowercase\r\n  * `upper` transform to uppercase\r\n\r\n```javascript\r\n  var test = \"  \\t  hello  to  THE \\t  wOrLD  \\n   \";\r\n  console.log(\"word : \" + js.utils.fnCapitalize(test, \"word\"));\r\n  console.log(\"title: \" + js.utils.fnCapitalize(test, \"title\"));\r\n  console.log(\"lower: \" + js.utils.fnCapitalize(test, \"lower\"));\r\n  console.log(\"upper: \" + js.utils.fnCapitalize(test, \"upper\"));\r\n```\r\n\r\n### fnNumericFormat *(object)*\r\nSets the numeric format according to **es-CO** culture.<br>\r\nPlaces the decimal`.` and thousand`,` separator.<br>\r\n**Returns** `String` with the formatted number\r\n* **object:** `String` or `DOM` element [category:text][category.text]\r\n\r\n```javascript\r\n  var num = \"123456789,47.15\";\r\n  console.log(js.utils.fnNumericFormat(num)); //sends String\r\n  var text = $(\"#txtName\").val(num);\r\n  js.utils.fnNumericFormat(text.get(0)) //sends DOM\r\n  console.log(text.val());\r\n```\r\n\r\n### fnIsValidFormat *(object, type)*\r\nValidates the format of text, depending on the type supplied.<br>\r\n**Note:** Date validations are performed according to **es-CO** culture.<br>\r\n**Returns** `Boolean`\r\n* **object:** `String` or `DOM` element [category:text][category.text]\r\n* **type:** `String` specifying the type of validation. Can be one of the following values:\r\n  * `d` validates the date format - dd/MM/yyyy\r\n  * `t` validates the time format - HH:mm:ss\r\n  * `dt` Validates DateTime format - dd/MM/yyyy HH:mm:ss\r\n  * `email` Validates an email address\r\n  * `pass` Validates the password strength (must have 8-20 characters, one+ uppercase, one+ number)\r\n  * `lat` Validates the latitude\r\n  * `lon` Validates the longitude\r\n\r\n```javascript\r\n  var _dateTime = \"31/10/2013 16:10:00\";\r\n  var _email = \"jherax-12gmail.com\";\r\n  var _pass = \"insufficient\";\r\n  console.log(js.utils.fnIsValidFormat(_dateTime, \"dt\"));\r\n  console.log(js.utils.fnIsValidFormat(_email, \"email\"));\r\n  console.log(js.utils.fnIsValidFormat(_pass, \"pass\"));\r\n```\r\n\r\n### fnIsValidDate *(dom, options)*\r\nEvaluates whether the value of text is a date or not.<br>\r\nThe validation outcome will be shown in a tooltip.<br>\r\nTooltip has a dependency on [jQuery.UI][jQuery.ui]<br>\r\n**Note:** Date validations are performed according to **es-CO** culture.<br>\r\n**Important:** You can set up the format error message through the property:<br>\r\n`js.utils.`<b><code>fnIsValidDate.formatError</code></b><br>\r\n**Returns** `Boolean`\r\n* **dom:** `DOM` element [category:text][category.text]\r\n* **options:** `Object` that provides the following settings:\r\n\r\n```javascript\r\n{\r\n  compareTo: Date, String //date against which to compare the entry value (Default: new Date())\r\n  isFuture: Boolean //determines whether entry date must be greater than [compareTo] (Default:false)\r\n  warning: String //message indicating that entry date did not meet the requirements\r\n}\r\n```\r\n```javascript\r\n  //this can be specified in a master page or using a singleton\r\n  js.utils.fnIsValidDate.formatError = \"The date format is incorrect\";\r\n  \r\n  //validates the form\r\n  $(\"#btnSendForm\").on(\"click\", function(){\r\n  \r\n  \tvar dBirthday = $(\"#txtBirthday\").get(0);\r\n  \tdBirthday.value = js.utils.fnGetDate().date;\r\n  \tvar dDriverLic = $(\"#txtDriverLic\").val(\"28/02/2010\").get(0);\r\n  \r\n  \tif(!js.utils.fnIsValidDate(dDriverLic, {\r\n  \t\twarning: \"The driver's license expedition can't be greater than today\"\r\n  \t})) return false;\r\n  \r\n  \tif(!js.utils.fnIsValidDate(dBirthday, {\r\n  \t\tcompareTo: dDriverLic.value,\r\n  \t\twarning: \"Your birthday can't be greater than the driver's license expedition\"\r\n  \t})) return false;\r\n  \r\n  });\r\n```\r\n\r\n### fnShowTooltip *(dom, message)*\r\nShows a tooltip ***message*** at the right side of the ***dom*** element and focuses that element.<br>\r\nThis function is very useful when need to notify the validation outcome.<br>\r\nIt has a dependency on [jQuery.UI][jQuery.ui] and also has a [css class][jherax.css] `.vld-tooltip`<br>\r\n**Returns** `Boolean`, always returns `false`\r\n* **message:** `String` with the text to show\r\n* **dom:** `DOM` element\r\n\r\n```javascript\r\n  var _email = $(\"txtEmail\").get(0);\r\n  if (!js.utils.fnIsValidFormat(_email, \"email\")) {\r\n    return js.utils.fnShowTooltip(_email, \"The email address is not valid\");\r\n  }\r\n```\r\n\r\n### fnLoading *(options)*\r\nShows a overlay screen with the \"loading\" indicator at the center.<br>\r\nThe progress animation is performed through CSS3, so you must add the [css class][jherax.css]:<br>\r\n`#floatingBarsG` `.blockG` `@keyframes fadeG` `.bg-fixed` `.bg-opacity`<br>\r\n**Returns** `Boolean`, always returns `true`\r\n* **options:** `Object` that provides the following settings:\r\n\r\n```javascript\r\n{\r\n  show: Boolean //shows the loading screen (Default: true)\r\n  hide: Boolean //hides the loading screen (Default: false)\r\n  delay: Number //miliseconds of fadeIn animation (Default: 2600)\r\n}\r\n```\r\n```javascript\r\n  $(\"#btnTest\").on(\"click\", function(){\r\n\t  js.utils.fnLoading();\r\n\t  setTimeout(function(){\r\n\t\t  js.utils.fnLoading({ hide:true });\r\n    }, 8000);\r\n  });\r\n```\r\n\r\n### fnSetFocus ()\r\nSets the focus on all `input:text` and `textarea` elements, except those that have `.no-auto-focus` class.<br>\r\nThis function is util when you need validate form fields.\r\n```javascript\r\n  $(document).on(\"ready\", function(){\r\n\t  $(\"#txtDate\").datepicker().addClass(\"no-auto-focus\");\r\n\t  $(\"#txtName\").fnCapitalize(\"word\");\r\n\t  $(\"#txtID\").fnNumericInput();\r\n  });\r\n  $(\"#btnSendForm\").on(\"click\", function(){\r\n\t  js.utils.fnSetFocus();\r\n  });\r\n```\r\n\r\njQuery plugins\r\n--------------\r\nThis is a set of utilities for [jQuery](http://jquery.com/).<br>\r\njQuery is a fast, small, and feature-rich JavaScript library. It makes things like HTML document traversal and manipulation, event handling, animation, and Ajax much simpler with an easy API that works cross-browser.<br>\r\nIf you want to learn more about jQuery, here is a full guide: [How jQuery Works](http://learn.jquery.com/about-jquery/how-jquery-works/).\r\n\r\n### jQuery.fnCenter ()\r\nSets the collection of jquery objects in the center of screen.<br>\r\nElements are centered using fixed position.<br>\r\n**Returns** `jQuery`\r\n```javascript\r\n  var div = $('<div id=\"divHello\" />').css({\r\n    'padding': '20px',\r\n    'background': '#ccc',\r\n    'borderRadius': '5px'\r\n  }).appendTo(\"body\").html(\"<h4>Hello jQuery</h4>\");\r\n  div.fnCenter();\r\n```\r\n\r\n### jQuery.fnMaxLength *(length)*\r\nLimits the max length of characters in the elements [category:text][category.text]<br>\r\nA tooltip will be placed on the right side of input element showing the characters remaining.<br>\r\nIt has a dependency on [jQuery.UI][jQuery.ui] and also has a [css class][jherax.css] `.vld-tooltip`<br>\r\n**Returns** `jQuery`\r\n* **length:** `Number` specifying the max length of characters\r\n\r\n```javascript\r\n  $(\"#txtName\").fnMaxLength(20);\r\n  $(\".numbers\").fnMaxLength(10);\r\n```\r\n\r\n### jQuery.fnCapitalize *(type)*\r\nThis is the jQuery version of [fnCapitalize](#fncapitalize-object-type).<br>\r\nTransforms the text to capital letter. (Some articles are lowercased according to **es-CO** culture)<br>\r\nThe plugin also removes all newlines, spaces, and tabs from the beginning and end of the string.<br>\r\nIf the whitespace characters occur in the middle of the string, also they are removed.<br>\r\n**Note:** The text is transformed when the `blur` event occurs.<br>\r\n**Returns** `jQuery`\r\n* **type:** `String` specifying the text transformation. Can be one of the following values:\r\n  * `word` transform to lowercase and then turns the first letter of each word into uppercase\r\n  * `title` turns the first letter of each word into uppercase\r\n  * `lower` transform to lowercase\r\n  * `upper` transform to uppercase\r\n\r\n```javascript\r\n  var text = \"  \\t  hello \\t\\t  jQuery\\t\\n \";\r\n  console.log(text);\r\n  var name = $(\"#txtName\").val(text);\r\n  name.fnCapitalize(\"title\").focus();\r\n  //raise blur event to transform text\r\n```\r\n\r\n### jQuery.fnNumericFormat ()\r\nThis is the jQuery version of [fnNumericFormat](#fnnumericformat-object).<br>\r\nSets the numeric format according to **es-CO** culture.<br>\r\nPlaces the decimal`.` and thousand`,` separator.<br>\r\n**Note:** The text is formatted when the `keyup, blur` events occurs.<br>\r\n**Returns** `jQuery`\r\n```javascript\r\n  var num = \"123456789,47.15\";\r\n  console.log(num); //number to be formatted\r\n  $(\"#txtName\").val(num).fnNumericFormat().focus();\r\n```\r\n\r\n### jQuery.fnNumericInput ()\r\nThis function allows that only numeric keys can be pressed at the input.<br>\r\n**Returns** `jQuery`\r\n```javascript\r\n  $(\".vld-numeric\").fnNumericInput();\r\n```\r\n\r\n### jQuery.fnCustomInput *(mask)*\r\nThis function applies a mask for the allowed characters.<br>\r\n**Returns** `jQuery`\r\n* **mask:** It can be one of these:<br>`String`: is a literal with the allowed characters.<br>`RegExp`: is a regular expression for the allowed characters.\r\n\r\n```javascript\r\n  $(\"#txtGrade\").fnCustomInput(\"abc1-6\");\r\n  $(\"#txtEmail\").fnCustomInput(/[@ñ;.\\-\\w]/);\r\n```\r\n\r\n### jQuery.fnDisableKey *(keys)*\r\nDisables the specified keyboard keys.<br>\r\nTo allow a set of characters, better use *[$.fnCustomInput](#jqueryfncustominput-mask)*<br>\r\n**Returns** `jQuery`\r\n* **keys:** `String` with character(s) that will be blocked\r\n\r\n```javascript\r\n  // prevents the spacebar is pressed in document\r\n  $(document).fnDisableKey(\" \");\r\n  // avoids pressing the keys q,w,e,r,t on the input\r\n  $(\"#txtName\").fnDisableKey(\"qwert\");\r\n```\r\n\r\n### jQuery.fnEasyValidate *(fnvalidator)*\r\nValidates the form fields with css class `.vld-required` through a submit button.<br>\r\nIt has a dependency on [jQuery.UI][jQuery.ui] for the validation notification.<br>\r\nIf you wish to validate only a set of elements in the form, you can specify a **validation group** by adding the `data-validation` attribute to the elements to validate and also to the submit button.<br>\r\n**Returns** `jQuery`\r\n* **fnvalidator:** `Function`. If it is specified, this function performs a custom validation and must return:<br> `true`: submit the form.<br>`false`: cancel submit.\r\n\r\n```html\r\n<select id=\"ddlType\" class=\"vld-required\" data-validation=\"group.a\">\r\n  <option value=\"0\">Select...</option>\r\n  <option value=\"1\">Magnetic</option>\r\n  <option value=\"2\">Electric</option>\r\n</select>\r\n<input type=\"number\" id=\"txtValue\" class=\"vld-numeric vld-required\" data-validation=\"group.a\" />\r\n<input type=\"date\" id=\"txtDate\" class=\"vld-required\" /><!--This one isn't in the validation group-->\r\n<button type=\"submit\" id=\"btnAdd\" data-validation=\"group.a\">Add new item</button>\r\n```\r\n```javascript\r\n$(document).on(\"ready\", function () {\r\n    $(\".vld-numeric\").fnNumericInput();\r\n    $(\"#txtDate\").datepicker().addClass(\"no-auto-focus\");\r\n    //$(\"#btnAdd\").fnEasyValidate(); //only validates that required fields are not empty\r\n    $(\"#btnAdd\").fnEasyValidate(function (btn) { //this function is fnvalidator parameter\r\n        var num = $('#txtValue').get(0);\r\n        if (parseFloat(num.value) < 1000) {\r\n          return js.utils.fnShowTooltip(num, \"Price must be greater than $999\"); //cancels submit\r\n        }\r\n        return true; //submits the form\r\n    });\r\n});\r\n```\r\n\r\nAppendix\r\n--------\r\n### Category:text\r\nWe speak about *DOM element category:text* when that object belongs to one of the following html elements:\r\n```html\r\n  <textarea></textarea>\r\n  <input type=\"text\" />\r\n  <input type=\"password\" />\r\n  <input type=\"number\" />\r\n  <input type=\"search\" />\r\n  <input type=\"tel\" />\r\n  <input type=\"url\" />\r\n  <input type=\"email\" />\r\n  <input type=\"datetime\" />\r\n  <input type=\"datetime-local\" />\r\n  <input type=\"date\" />\r\n  <input type=\"time\" />\r\n  <input type=\"month\" />\r\n  <input type=\"week\" />\r\n  <input type=\"file\" />\r\n```\r\n\r\n<!-- links -->\r\n[js-utils]: https://github.com/jherax/js-utils.git\r\n[jQuery.js]: http://code.jquery.com/jquery-1.10.2.min.js\r\n[jQuery.ui]: http://ajax.googleapis.com/ajax/libs/jqueryui/1.9.2/jquery-ui.min.js\r\n[category.text]: #categorytext\r\n[jherax.css]: https://github.com/jherax/js-utils/tree/master/assets/css/jherax.css\r\n[jherax.js]: https://github.com/jherax/js-utils/tree/master/assets/js/jherax.js\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}